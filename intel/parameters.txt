# QIIME2 pipeline variables

# Paired or single end sequences? Answer 'yes' on only one?
paired_seqs='yes' 	# { yes | no }
single_seqs='no'	# { yes | no }

# Pre-processing
# If yes, pass the preprocessing parameters

## Truncate at 3'
trunc_f=240		# Suggested: 200-300 (v4), 250-350 (v3-v5)
trunc_r=230		# Suggested: 20 less than above

## 5' trimming
trim_f=00		# For both this and below, you should check your 
trim_r=00		# reads quality file

## Expected errors
## A better way to control sequencing error than phred score average.
## Read from EDGAR @ usearch:
## https://www.drive5.com/usearch/manual7/expected_errors.html

max_ee=04		# I always use from 0.5 (minimal errors) to 10 
			# (lots of spurious OTUs), most of the time i default 
			# to 1% of target sequence size (4 if 400, 3 if 300),
			# etc.

# Sequence classification cluster identity (%)
parameter_identity=0.97		# Suggestions:
				# 0.97 most relaxed, most errors
				# 0.99 Edgar's default
				# 1.00 most stringent, more OTUs, less count


# Number of threads to use
parameter_threads=35

# Opções de anotador: vsearch | blast
annotator="blast"

# Banco de dados escolhido ("SILVA" | "Greengenes" | "Other")
choosen_database="SILVA"

# Directory to store analysis outputs
coredir=`echo $PWD`	# DO NOT CHANGE THIS!
			# Tells q2pipe to run it all on its own dir

# Overwrite USEARCH outputs?
overwrite_usearch="False"		# { True | False }

# Start preprocessing on demux.qza using this parameters?
preproc="yes"		# { yes | no }
			# Mark this as 'yes' if you want to run DADA2 to 
			# correct errors on your data all over again

# Use which preproc file?
preprocname="01A"	# If you're not gonna preproc, put here the name
			# of the already preprocessed file to run the rest
			# of the pipeline.

# Test name?
testdir="./test/01A"	# Write here the ID of your run; the scripts
			# stores all output from your current run
			# on the declared directory, except the
			# DADA2-error-corrected sequences,
			# which are stored on './artifacts'
			# for further use.

# What's the name of the new test?
testname=`basename ${testdir} | sed 's/test//'`	
			# DO NOT CHANGE THIS!
			# Gets the three chracter ID from variable ${testdir}
			
# Directory to store qiime2 artifacts
artdir="./artifacts"

# Relative path to intel directory
inteldir="./intel"


# Diretório para as sequências clusterizadas"
seqsdir="${testdir}/clusterized"

# Cluster de novo? (yes|no)
denovo="no"

# If yes above, pick a cluster identity percentage
parameter_cluster_id=0.99

#################### DATABASES ##################################
#								#
# Reference sequences (qza) - current: Silva 0.99 full length
# SILVA 128: ref_seqs="/work/db/qiime/SILVA_128_QIIME_release/artifacts/silva128_99.qza"
# SILVA 132: 
ref_seqs="$coredir/db/silva132_99.qza"
# GDP: ref_seqs="/data/db/qiime/GRD/artifacts/GRD_sequences.qza"

# Reference taxonomy - current: Silva 0.99 full lenght tax
# SILVA 128: ref_tax="/work/db/qiime/SILVA_128_QIIME_release/artifacts/silva128_99_taxonomy.qza"
# SILVA 132: 
ref_tax="$coredir/db/silva132_99_taxonomy.qza"
# GDP: ref_tax="/data/db/qiime/GRD/artifacts/GRD_taxonomy.qza"

# Oligonucleotide database
db_primers="./db/primers.fa"

# Arquivo de sequências representativas e tabela
rep_seqs="${preprocname}-rep-seqs-dada2.qza"
table_seqs="${preprocname}-table-dada2.qza"

# Correr a diversidade?
run_diversity="yes"

# Gerar com cloroplasto e mitocondrias?
run_corrupt="yes"

# Cria a variável "Nome da análise"
testname=`echo ${testdir} | sed 's/\.\/test\///'`

# Metadata columns
col_01=`cut -s -f2 intel/metadata.tsv | sed -n 1p`

## Fim da declaração de variáveis
